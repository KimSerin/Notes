1. repository 생성
- [Add .gitignore] 데이터 베이스 등 환경설정을 진행하는 파일은 공개되지 않도록 할 때 사용
-  [Add a license] 오픈소스 라이센스 중 어떤거 채택하고 있는지 알려주기 위해 사용

2. 생성된 repository에 접근 방법
- desktop에 설치
- https 주소
- ssh(secure shell)

3. 접근방법 별 장단점
- https: 
 장점: 로그인 하면 별도 설정 없이 접근할 수 있음,
 단점: push 또는 원격 저장소에 접근할 때마다 로그인 해야함.
- ssh:
 장점: 로그인 할 필요 없음
 단점: 
 사용 방법: ssh-keygen 명령어 + 엔터 3번 -> 홈/.ssh 경로에 id_rsa(private키),
		d-rsa.pub(public키)가 생성됨, 접속하고자 하는 서버 컴퓨터에 public키가
		저장되어 로그인 없이 접근할 수 있게 됨. public키 저장 방법은 생성된 public키를
		복사하여 github 사이트에서 설정한다. 이후에는 로그인없이 모든 접근 가능
		
3. git 명령어
git --version : 버전 확인
git config : 환경설정
git config --global : 하나의 프로젝트가 아니라 컴퓨터 전체에 해당하는 설정 추가
git config --global user.name KimSerin: 이름 설정
git config --global user.email glasstaiji@naver.com: 메일 설정
git clone [git https 주소]: 내려받고자 하는 폴더로 들어간 후 명령어 실행. clone을 하면
		해당 컴퓨터로 저장소로서 역할을 하며 로컬 repository라 한다. 
		github 주소는 원격지 repository 또는 remote repository라 한다.
git add [파일 이름]: 새로운 파일을 추가 (git add . 하면 모든 파일 add)
git commit -m ["추가관련정보"]: 스냅샷 찍듯 이 시점으로 파일을 복구할 수 있게 한다.(아직
		remote repository에는 미적용 상태. local repository에 저장 됨
git push: remote repository에 적용 됨
git fetch: git 서버에서 최신소스를 받아온다.(remote repository -> local repository)
git merge: fetch에서 충돌(conflict)이 발생하는 경우 사용
	(local repository -> Working directory)
git pull: git fetch + git merge 한번에 명령
git status: git 상태(변경된 파일) 보여줌.
git reset: Staging Area -> Working Directory(add 취소)
git checkout -- [파일명]: 해당 파일의 수정된 내용을 무시.. 즉 remote repository
	내용으로 되돌림. modified가 아닌 상태로 돌아감
git commit --amend: commit을 잘못했을 경우 수정(a 입력해서 수정모드 진입 :wq! 저장)
git log: commit 내역 확인
git reset --hard [commit hash번호]: 해당 commit 소스로 되돌림
	(hard 옵션으로는 해당 commit 이후 이력을 모두 삭제)
	(soft 옵션으로는 소스는 되돌리고 이력은 남겨둠)
	remote repository에 반영하기 위해서는 git push -f로 강제로 push 해야 함
4. 라이센스
MIT License: 무료, 배포가능, 소스코드 수정 가능, 2차 저작물 공개의무 없음
Apache License: 무료, 배포가능, 소스코드 수정 가능, 2차 저작물 공개의무 없음
GPL: 무료, 배포가능, 소스코드 수정 가능, 2차 저작물 공개의무 있음
Beerware: 만나면 그냥 술이나 사주자(실제존재ㅎㅎ)

5. git 장점
- 중앙 서버의 개념이 없으며 중앙 서버처럼 사용하는 컴퓨터가 있다고 하더라도, 그 서버가 망가졌을 때
	다른 컴퓨터로부터(각각의 repository가 있음) 소스코드를 복구할 수 있다.
- 브랜치라는 개념이 존재. 프로젝트의 가지치기가 가능하다.
- 변경이력 보장

6. git의 동작 원리
- git 프로젝트에 담겨 있는 데이터들은 파일 시스템 상에서의 스냅샷이라고 볼 수 있다.
	파일 자체라기 보다 수정 내역 자체를 저장(메모리 효율)
- Working Directory: 작업할 파일이 있는 디렉토리
- Staging Area: 커밋을 수행할 파일들이 올라가는 영역(Working directory에서
	git add 된 파일)
- Git Directory: .git 파일이 있는 디렉토리. git 프로젝트의 메타 데이터와 데이터 정보가
	저장되는 디렉토리
- 저장소(repository, repo): 실제 소스코드가 있으면서, 커밋 내역 등의 모든 이력이 담겨 있는
	공간(.git 폴더에는 설정관련 정보들 저장)

7. 수정한 소스 git 저장소에 반영하는 방법
- 해당 프로젝트에 소속된 사람이 아닌 경우
: commit 권한이 없으므로, PR(Pull Request)을 작성하여 오픈소스에 기여
- 해당 프로젝트에 소속된 사람인 경우
: git status, git add, git commit -m, git push

8. commit 내역을 수정하는 방법
git commit --amend

9. 브랜치(branch)
- 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 해줌
- repository를 만들면 자동으로 master(배포가 가능한 수준의 안정화된 버전을 담는 브랜치)
	브랜치가 생성된다. 보통 develop branch에서 개발을 하고, bug fix branch를
	만들어서 버그를 수정한다. 검증 후 master 브랜치와 merge한다. 항상 master 브랜치는
	안정화 되어있어야 한다.
	통합브랜치(master 브랜치)
	포픽브랜치(master 이외의 브랜치)
	
